<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
    <TITLE>ootbi</TITLE>
    <META http-equiv="Content-Type" content="text/html; charset=UTF-8"></META>
	<META name="viewport" content="width=device-witdh, initial-scale=1, maximum-scale=1, user-scale=0"></META>
    <link rel="stylesheet" type="text/css" href="../css/OpMenu.css">

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script> 
    <script src="../js/jquery.contextmenu.js"></script>
    <link rel="stylesheet" href="../css/jquery.contextmenu.css">
    
<script src="../js/D3Uti.js"></script>
<script src="../js/OpMenu.js"></script>
<script src="../dat/links_p2p_logo.json"></script>
<script src="../dat/links_p2p_picto.json"></script>
<script>
$(document).ready(function(){

});
</script>
<style>
body{
overflow:scroll;
}
#dout{
 overflow:auto;
 white-space:nowrap;
 height:100%;
 border: 1px solid #cccccc;
 background-color:#eeee99;
 opacity:0.8;
}

.link {
  fill: none;
  stroke: #666;
  stroke-width: 0.5px;
}

#licensing {
  fill: #9ecae1;
}

.link.licensing {
  stroke: #9ecae1;
  stroke-width: 1.5px;
}

.link.resolved {
  stroke-dasharray: 0,2 1;
}

circle {
  fill: #ffffff;
  stroke: #333;
  stroke-width: 0.5px;
}

text {
  font: 10px sans-serif;
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}

</style>
</head>
<body>
<div id="OpMenu">

<select id="selop">
<option></option>
<option value="UpdateGraphic">RefreshGraphic</option>
<option value="Save2File">Save2File</option>

<option></option>
<option>../dat/d3Tree_demo_logo.json</option>
<option>../dat/d3Tree_demo_picto.json</option>
<option>../dat/d3Tree_logo.json</option>
<option>../dat/d3Tree_picto.json</option>
<option>../dat/d3Tree_picto_living.json</option>
<option>../dat/d3Tree_picto_noneliving.json</option>

<option></option>
<option value="ViewP2pArr">ViewData:P2pArr</option>
<option value="ViewD3Links">ViewGraphic:links</option>
<option value="ViewD3Nodes">ViewGraphic:nodes</option>

<option></option>
<option value="ViewTreeNodeList">ViewTreeNodeList</option>
<option value="View_sout_jid_jnm">View_sout_jid_jnm</option>
<option value="ViewTreeJson">ViewTreeJson</option>
</select><br/>
<div id='dout'>+</div>

</div>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>

// http://blog.thomsonreuters.com/index.php/mobile-patent-suits-graphic-of-the-day/
var links = [
  {source: "Microsoft", target: "Amazon", type: "licensing"},
  {source: "Microsoft", target: "HTC", type: "licensing"},
  {source: "Samsung", target: "Apple", type: "suit"},
  {source: "Motorola", target: "Apple", type: "suit"},
  {source: "Nokia", target: "Apple", type: "resolved"},
  {source: "HTC", target: "Apple", type: "suit"},
  {source: "Kodak", target: "Apple", type: "suit"},
  {source: "Microsoft", target: "Barnes & Noble", type: "suit"},
  {source: "Microsoft", target: "Foxconn", type: "suit"},
  {source: "Oracle", target: "Google", type: "suit"},
  {source: "Apple", target: "HTC", type: "suit"},
  {source: "Microsoft", target: "Inventec", type: "suit"},
  {source: "Samsung", target: "Kodak", type: "resolved"},
  {source: "LG", target: "Kodak", type: "resolved"},
  {source: "RIM", target: "Kodak", type: "suit"},
  {source: "Sony", target: "LG", type: "suit"},
  {source: "Kodak", target: "LG", type: "resolved"},
  {source: "Apple", target: "Nokia", type: "resolved"},
  {source: "Qualcomm", target: "Nokia", type: "resolved"},
  {source: "Apple", target: "Motorola", type: "suit"},
  {source: "Microsoft", target: "Motorola", type: "suit"},
  {source: "Motorola", target: "Microsoft", type: "suit"},
  {source: "Huawei", target: "ZTE", type: "suit"},
  {source: "Ericsson", target: "ZTE", type: "suit"},
  {source: "Kodak", target: "Samsung", type: "resolved"},
  {source: "Apple", target: "Samsung", type: "suit"},
  {source: "Kodak", target: "RIM", type: "suit"},
  {source: "Nokia", target: "Qualcomm", type: "suit"}
];
var nodes = {};

var ood3tree=D3Uti.LoadTree("../dat/ood3tree.json"); 
var d3tree=new D3Tree(ood3tree);
var links_p2p = []; //not used anymore


function update_nodes_links(){
    nodes = {};
    d3tree=new D3Tree(ood3tree);
    links_p2p = d3tree.GenP2pObjArr();
    links=JSON.parse(JSON.stringify(links_p2p));
  // Compute the distinct nodes from the links.
  links.forEach(function(link) {
    console.log(JSON.stringify(link));
    link.source = nodes[link.source] || (nodes[link.source] = {name: link.source, srcaddr:link.addr,img:link.img});
    link.target = nodes[link.target] || (nodes[link.target] = {name: link.target, addr:link.addr,img:link.img});
  });
}

update_nodes_links();





var width = 1060+2*links.length,
    height = 1000+2*links.length,
    icharge=-800,
    igravity=0.5;

var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([width, height])
    .linkDistance(myDistance)
    .charge(icharge)
    .gravity(igravity)
    .on("tick", tick)
    .start();

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

// Per-type markers, as they don't inherit styles.
svg.append("defs").selectAll("marker")
    .data(["suit", "licensing", "resolved"])
  .enter().append("marker")
    .attr("id", function(d) { return d; })
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("path")
    .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("g").selectAll("path")
    .data(force.links())
  .enter().append("path")
    .attr("class", function(d) { return "link " + d.type; })
    .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

var circle = svg.append("g").selectAll("circle")
    .data(force.nodes())
  .enter().append("circle")
    .attr("r", 10)
    .call(force.drag);

var text = svg.append("g").selectAll("text")
    .data(force.nodes())
  .enter().append("text")
    .attr("x", 8)
    .attr("y", ".31em")
    .text(function(d) { return d.addr; });

var image = svg.append("g").selectAll("MyImg")
    .data(force.nodes())
  .enter().append("image")
      .attr("xlink:href", myImg) 
      .attr("x", "-7px")
      .attr("y", "-7px")
      .attr("width", "14px")
      .attr("height", "14px")
      .call(force.drag)
      .on("click",clickImg);

//use my img from name.
function myImg(nod){
   var img=D3Uti.ImgFile(nod);
   return img;
};  

function clickImg(nod){
   if (d3.event.defaultPrevented) return; // ignore drag

   var ss=D3Uti.strKeyValPairs(nod);
   console.log(ss);//JSON.stringify(nod));
   var ret=ImgPopupMenu.clickD3Node(nod);
   if(true===ret) return;
   for(k in nod){
       //console.log(k+"="+nod[k]);
   }
}    
  
// Use elliptical arc path segments to doubly-encode directionality.
function tick() {
  path.attr("d", linkArc);
  circle.attr("transform", transform);
  text.attr("transform", transform);
  image.attr("transform", transform);
}

function linkArc(d) {
  var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y,
      dr = Math.sqrt(dx * dx + dy * dy);
      
      var signx=(d.target.x < d.source.x) ?  1:-1;
      var signy=(d.target.y < d.source.y) ?  1:-1;
      
      //ajustment for arrow end point.
      var arc=Math.atan2(dy, dx);
      var radius=5;
      var dltx=radius*Math.cos(arc);
      var dlty=radius*Math.sin(arc);
      
  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + (d.target.x-dltx) + "," + (d.target.y-dlty);
}

function transform(d) {
  return "translate(" + d.x + "," + d.y + ")";
}
function myLabel(nod){
   return nod.addr;
}
function myDistance(nod){
   // var arr=nod.addr.split(".");
   return 20;//*arr.length;
}

//Update
function update_graphic(){

    update_nodes_links();
    
    force = d3.layout.force()
        .nodes(d3.values(nodes))
        .links(links)
        .size([width, height])
        .linkDistance(myDistance)
        .charge(icharge)
        .gravity(igravity)
        .on("tick", tick)
        .start();
    
    

    svg.selectAll("g").remove();

    
    // Per-type markers, as they don't inherit styles.
    svg.append("defs").selectAll("marker")
        .data(["suit", "licensing", "resolved"])
      .enter().append("marker")
        .attr("id", function(d) { return d; })
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 15)
        .attr("refY", -1.5)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto")
      .append("path")
        .attr("d", "M0,-5L10,0L0,5");
    
    path = svg.append("g").selectAll("path")
        .data(force.links())
      .enter().append("path")
        .attr("class", function(d) { return "link " + d.type; })
        .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });
    
    circle = svg.append("g").selectAll("circle")
        .data(force.nodes())
      .enter().append("circle")
        .attr("r", 10)
        .call(force.drag);
    
    text = svg.append("g").selectAll("text")
        .data(force.nodes())
      .enter().append("text")
        .attr("x", 8)
        .attr("y", ".31em")
        .text(function(d) { return d.addr; });
    
    image = svg.append("g").selectAll("MyImg")
        .data(force.nodes())
      .enter().append("image")
          .attr("xlink:href", myImg) 
          .attr("x", "-7px")
          .attr("y", "-7px")
          .attr("width", "14px")
          .attr("height", "14px")
          .call(force.drag)
          .on("click",clickImg);
          
          
    InitImgMenu();      
}


function update_graphiczzzz(){

    nodes = {};
    update_nodes_links();
    
    force 
        .nodes(d3.values(nodes))
        .links(links)
        .start();
    
          
    InitImgMenu();      
}




















var graph;
    function myGraph() {

        // Add and remove elements on the graph object
        this.addNode = function (id) {
            nodes.push({"id": id});
            update();
        };

        this.removeNode = function (id) {
            var i = 0;
            var n = findNode(id);
            while (i < links.length) {
                if ((links[i]['source'] == n) || (links[i]['target'] == n)) {
                    links.splice(i, 1);
                }
                else i++;
            }
            nodes.splice(findNodeIndex(id), 1);
            update();
        };

        this.removeLink = function (source, target) {
            for (var i = 0; i < links.length; i++) {
                if (links[i].source.id == source && links[i].target.id == target) {
                    links.splice(i, 1);
                    break;
                }
            }
            update();
        };

        this.removeallLinks = function () {
            links.splice(0, links.length);
            update();
        };

        this.removeAllNodes = function () {
            nodes.splice(0, links.length);
            update();
        };

        this.addLink = function (source, target, value) {
            links.push({"source": findNode(source), "target": findNode(target), "value": value});
            update();
        };

        var findNode = function (id) {
            for (var i in nodes) {
                if (nodes[i]["id"] === id) return nodes[i];
            }
            ;
        };

        var findNodeIndex = function (id) {
            for (var i = 0; i < nodes.length; i++) {
                if (nodes[i].id == id) {
                    return i;
                }
            }
            ;
        };

        // set up the D3 visualisation in the specified element
        var w = 960,
                h = 450;

        var color = d3.scale.category10();

        var vis = d3.select("body")
                .append("svg:svg")
                .attr("width", w)
                .attr("height", h)
                .attr("id", "svg")
                .attr("pointer-events", "all")
                .attr("viewBox", "0 0 " + w + " " + h)
                .attr("perserveAspectRatio", "xMinYMid")
                .append('svg:g');

        var force = d3.layout.force();

        var nodes = force.nodes(),
                links = force.links();

        var update = function () {
            var link = vis.selectAll("line")
                    .data(links, function (d) {
                        return d.source.id + "-" + d.target.id;
                    });

            link.enter().append("line")
                    .attr("id", function (d) {
                        return d.source.id + "-" + d.target.id;
                    })
                    .attr("stroke-width", function (d) {
                        return d.value / 10;
                    })
                    .attr("class", "link");
            link.append("title")
                    .text(function (d) {
                        return d.value;
                    });
            link.exit().remove();

            var node = vis.selectAll("g.node")
                    .data(nodes, function (d) {
                        return d.id;
                    });

            var nodeEnter = node.enter().append("g")
                    .attr("class", "node")
                    .call(force.drag);

            nodeEnter.append("svg:circle")
                    .attr("r", 12)
                    .attr("id", function (d) {
                        return "Node;" + d.id;
                    })
                    .attr("class", "nodeStrokeClass")
                    .attr("fill", function(d) { return color(d.id); });

            nodeEnter.append("svg:text")
                    .attr("class", "textClass")
                    .attr("x", 14)
                    .attr("y", ".31em")
                    .text(function (d) {
                        return d.id;
                    });

            node.exit().remove();

            force.on("tick", function () {

                node.attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                });

                link.attr("x1", function (d) {
                    return d.source.x;
                })
                        .attr("y1", function (d) {
                            return d.source.y;
                        })
                        .attr("x2", function (d) {
                            return d.target.x;
                        })
                        .attr("y2", function (d) {
                            return d.target.y;
                        });
            });

            // Restart the force layout.
            force
                    .gravity(.01)
                    .charge(-80000)
                    .friction(0)
                    .linkDistance( myDistance )
                    .size([w, h])
                    .start();
        };


        // Make it all go
        update();
    };
    
var update = function () {
            var link = svg.selectAll("line")
                    .data(links, function (d) {
                        return d.source.id + "-" + d.target.id;
                    });

            link.enter().append("line")
                    .attr("id", function (d) {
                        return d.source.id + "-" + d.target.id;
                    })
                    .attr("stroke-width", function (d) {
                        return d.value / 10;
                    })
                    .attr("class", "link");
            link.append("title")
                    .text(function (d) {
                        return d.value;
                    });
            link.exit().remove();

            var node = svg.selectAll("g.node")
                    .data(nodes, function (d) {
                        return d.id;
                    });

            var nodeEnter = node.enter().append("g")
                    .attr("class", "node")
                    .call(force.drag);

            nodeEnter.append("svg:circle")
                    .attr("r", 12)
                    .attr("id", function (d) {
                        return "Node;" + d.id;
                    })
                    .attr("class", "nodeStrokeClass")
                    .attr("fill", function(d) { return color(d.id); });

            nodeEnter.append("svg:text")
                    .attr("class", "textClass")
                    .attr("x", 14)
                    .attr("y", ".31em")
                    .text(function (d) {
                        return d.id;
                    });

            node.exit().remove();

            force.on("tick", function () {

                node.attr("transform", function (d) {
                    return "translate(" + d.x + "," + d.y + ")";
                });

                link.attr("x1", function (d) {
                    return d.source.x;
                })
                        .attr("y1", function (d) {
                            return d.source.y;
                        })
                        .attr("x2", function (d) {
                            return d.target.x;
                        })
                        .attr("y2", function (d) {
                            return d.target.y;
                        });
            });

            // Restart the force layout.
            force
                    .gravity(.01)
                    .charge(-80000)
                    .friction(0)
                    .linkDistance( function(d) { return d.value * 10 } )
                    .size([width, height])
                    .start();
};
</script>

</body>
</html>